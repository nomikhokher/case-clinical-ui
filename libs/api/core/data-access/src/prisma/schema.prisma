generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  role       Role
  developer  Boolean      @default(false)
  username   String       @unique
  password   String?
  firstName  String?
  lastName   String?
  avatarUrl  String?
  location   String?
  phone      String?
  bio        String?
  emails     Email[]      @relation("Email_belongsTo_Owner")
  TenantUser TenantUser[]
}

model Email {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  email         String    @unique
  public        Boolean   @default(false)
  primary       Boolean   @default(false)
  verified      Boolean   @default(false)
  verifyToken   String?
  verifyExpires DateTime?
  ownerId       String
  owner         User      @relation("Email_belongsTo_Owner", fields: [ownerId], references: [id])
}

model TenantUser {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  role      TenantRole
  userId    String?
  tenantId  String?
  tenant    Tenant?    @relation(fields: [tenantId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])
}

model Tenant {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  name      String
  schemata  Schema[]
  users     TenantUser[]
}

model Schema {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  publishedAt DateTime?
  stage       Stage     @default(DEV)
  name        String
  tenantId    String
  keywords    String[]
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  entities    Entity[]
  enums       Enum[]    @relation("Enum_belongsTo_Schema")
}

model Entity {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  publishedAt       DateTime?
  stage             Stage        @default(DEV)
  name              String
  description       String?
  dynamicProperties Json?
  schemaId          String
  keywords          String[]
  schema            Schema       @relation(fields: [schemaId], references: [id])
  fields            Field[]
  foreignKeys       ForeignKey[]
  keys              Key[]
  ontologies        Ontology[]
  relations         Relation[]   @relation("Relation_belongsTo_Entity")
  related           Relation[]   @relation("Relation_belongsTo_RelatedEntity")
}

model Relation {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  type        RelationType
  name        String
  description String?
  entityId    String
  relatedId   String
  entity      Entity       @relation("Relation_belongsTo_Entity", fields: [entityId], references: [id])
  related     Entity       @relation("Relation_belongsTo_RelatedEntity", fields: [relatedId], references: [id])
}

model Enum {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String
  description String?
  values      String[]
  schemaId    String
  schema      Schema   @relation("Enum_belongsTo_Schema", fields: [schemaId], references: [id])
}

model Key {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  stage        Stage      @default(DEV)
  keyType      KeyType
  name         String
  description  String?
  isDrivingKey Boolean
  entityId     String
  keywords     String[]
  entity       Entity     @relation(fields: [entityId], references: [id])
  ontologies   Ontology[]
}

model Field {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  publishedAt DateTime?
  stage       Stage        @default(DEV)
  fieldType   FieldType    @default(SingleLineOfText)
  dataType    DataType
  name        String
  description String?
  isName      Boolean      @default(false)
  isNullable  Boolean      @default(true)
  entityId    String
  keywords    String[]
  entity      Entity       @relation(fields: [entityId], references: [id])
  foreignKeys ForeignKey[] @relation("EntityForeignKey_Fields_1toM_Fields")
  ontologies  Ontology[]
}

model ForeignKey {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  stage           Stage      @default(DEV)
  name            String
  description     String?
  relatedEntityId String
  relatedFieldId  String
  keywords        String[]
  relatedEntity   Entity     @relation(fields: [relatedEntityId], references: [id])
  relatedField    Field      @relation("EntityForeignKey_Fields_1toM_Fields", fields: [relatedFieldId], references: [id])
  ontologies      Ontology[]
}

model Ontology {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  stage        Stage       @default(DEV)
  name         String?
  key          String
  value        String
  description  String?
  entityId     String
  keyId        String?
  fieldId      String?
  foreignKeyId String?
  keywords     String[]
  entity       Entity      @relation(fields: [entityId], references: [id])
  field        Field?      @relation(fields: [fieldId], references: [id])
  foreignKey   ForeignKey? @relation(fields: [foreignKeyId], references: [id])
  Key          Key?        @relation(fields: [keyId], references: [id])
}

enum Role {
  SuperAdmin
  Admin
  User
}

enum TenantRole {
  Owner
  User
}

enum Stage {
  DEV
  UAT
  PRODUCTION
}

enum RelationType {
  ManyToMany
  ManyToOne
  OneToMany
  OneToOne
}

enum KeyType {
  Int
  Guid
  Composite
}

enum FieldType {
  SingleLineOfText
  MultiLineText
  Markdown
  Slug
  RichText
  Number
  Float
  Boolean
  Date
  DateTime
  Json
  Asset
  Color
  Location
  Dropdown
  Typeahead
  Reference
}

enum DataType {
  String
  Text
  Integer
  Float
  Boolean
  DateTime
  Enumeration
  Json
}
